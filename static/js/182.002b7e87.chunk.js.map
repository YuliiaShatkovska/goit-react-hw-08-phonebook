{"version":3,"file":"static/js/182.002b7e87.chunk.js","mappings":"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","sources":["components/App/App.styled.js","components/Title/Title.styled.js","components/Title/Title.jsx","redux/filter/selector.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactList.styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 100%;\n  max-width: 288px;\n  padding: 16px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 768px) {\n    max-width: 727px;\n    padding: 20px;\n  }\n\n  /* @media screen and (min-width: 1280px) {\n    max-width: 1230px;\n    padding: 25px;\n  } */\n`;\n","import styled from 'styled-components';\n\nexport const TitleStyle = styled.h2`\n  margin-bottom: 10px;\n  color: #7be8ea;\n`;\n","import { TitleStyle } from './Title.styled';\n\nexport const Title = ({ children }) => {\n  return <TitleStyle>{children}</TitleStyle>;\n};\n","export const selectFilter = state => state.filter.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../../redux/filter/selector';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFiltredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const filtred = filter.toLowerCase();\n    const contactList = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filtred)\n    );\n\n    return contactList;\n  }\n);\n","import { ErrorMessage, Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const ContactFormContainer = styled(Form)`\n  border: 1px solid #757473;\n  box-shadow: 0px -2px 7px #757473;\n  border-radius: 10px;\n  padding: 15px;\n  max-width: 100%;\n  margin-bottom: 30px;\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const ContactInput = styled(Field)`\n  padding: 10px;\n  outline: transparent;\n  background-color: transparent;\n  border: none;\n  border: 1px solid #757473;\n  border-radius: 10px;\n  color: #c0bfbf;\n\n  &:hover {\n    border-color: #7be8ea;\n  }\n\n  > input:-internal-autofill-selected {\n    appearance: menulist-button;\n    background-image: none !important;\n    background-color: transparent !important;\n  }\n`;\n\nexport const ContactErrorMessage = styled(ErrorMessage)`\n  color: #a47e81;\n  font-size: 14px;\n  margin-bottom: 5px;\n`;\n\nexport const ContactFormBtn = styled.button`\n  padding: 10px;\n  border: none;\n  border-radius: 10px;\n  border: 1px solid #757473;\n  background-color: transparent;\n  margin-top: 10px;\n  color: inherit;\n\n  &:hover {\n    border-color: #7be8ea;\n  }\n`;\n","// import { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { Title } from '../Title/Title';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport {\n  ContactErrorMessage,\n  ContactFormBtn,\n  ContactFormContainer,\n  ContactInput,\n  InputContainer,\n} from './ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n  email: '',\n};\n\nconst ContactForm = () => {\n  const formNameId = nanoid();\n  const numberId = nanoid();\n  const emailId = nanoid();\n\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const onHandleSubmit = ({ name, number, email }, { resetForm }) => {\n    const sameName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (sameName) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number, email }));\n\n    Notiflix.Notify.info(`\n    The contact ${name} has been successfully added!`);\n\n    resetForm();\n  };\n\n  return (\n    <>\n      <Title>Phonebook</Title>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onHandleSubmit}\n        validationSchema={schema}\n      >\n        <ContactFormContainer>\n          <InputContainer>\n            <label htmlFor={formNameId}>Name</label>\n            <ContactInput\n              id={formNameId}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              placeholder=\"Alice\"\n            />\n\n            <ContactErrorMessage name=\"name\" component=\"div\" />\n          </InputContainer>\n\n          <InputContainer>\n            <label htmlFor={numberId}>Number</label>\n            <ContactInput\n              id={numberId}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"+380\"\n              pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            />\n            <ContactErrorMessage name=\"number\" component=\"p\" />\n          </InputContainer>\n\n          <InputContainer>\n            <label htmlFor={emailId}>Email</label>\n            <ContactInput\n              id={emailId}\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"example@mail.com\"\n            />\n            <ContactErrorMessage name=\"number\" component=\"p\" />\n          </InputContainer>\n          <ContactFormBtn type=\"submit\">Add contact</ContactFormBtn>\n        </ContactFormContainer>\n      </Formik>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n  color: #c0bfbf;\n`;\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const ContactsBtn = styled.button`\n  cursor: pointer;\n  border: none;\n  border: 1px solid #757473;\n  background-color: transparent;\n  padding: 5px 10px;\n  border-radius: 10px;\n  color: inherit;\n\n  &:hover {\n    border-color: #7be8ea;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectFiltredContacts } from '../../redux/contacts/selectors';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { ContactsBtn, ContactsItem, ContactsList } from './ContactList.styled';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const deleteContact = ({ _id, name }) => {\n    console.log(_id, name);\n    dispatch(deleteContacts(_id));\n    Notiflix.Notify.info(\n      `\n    The contact ${name} has been successfully deleted!`\n    );\n  };\n\n  const contactList = useSelector(selectFiltredContacts);\n  console.log(contactList);\n\n  return (\n    <ContactsList>\n      {contactList.length > 0 &&\n        contactList.map(el => (\n          <ContactsItem key={el._id}>\n            <div>\n              <b>{el.name}</b>: {el.number}\n            </div>\n\n            <ContactsBtn type=\"button\" onClick={() => deleteContact(el)}>\n              Delete\n            </ContactsBtn>\n          </ContactsItem>\n        ))}\n    </ContactsList>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 30px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 10px;\n  outline: transparent;\n  background-color: transparent;\n  border: none;\n  border: 1px solid #757473;\n  border-radius: 10px;\n  color: #c0bfbf;\n\n  &:hover {\n    border-color: #7be8ea;\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from '../../redux/filter/filterSlice';\nimport { selectFilter } from '../../redux/filter/selector';\nimport { TitleStyle } from 'components/Title/Title.styled';\nimport { FilterContainer, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const filterId = nanoid();\n\n  const { filter } = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const { value } = e.currentTarget;\n\n    dispatch(filterContact(value));\n  };\n\n  return (\n    <>\n      <TitleStyle>Contacts</TitleStyle>\n      <FilterContainer>\n        <label htmlFor={filterId}>Find contacts by name</label>\n        <FilterInput\n          type=\"text\"\n          name=\"filter\"\n          id={filterId}\n          value={filter}\n          onChange={onChange}\n        />\n      </FilterContainer>\n    </>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderContainer } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <LoaderContainer>\n      <ThreeDots color=\"#7be8ea;\" />\n    </LoaderContainer>\n  );\n};\nexport default Loader;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport ContactList from '../components/ContactsList/ContactsList';\nimport Filter from '../components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from '../redux/contacts/selectors';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { Container } from 'components/App/App.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <ContactForm />\n      <Filter />\n      {isLoading && !error ? (\n        <Loader />\n      ) : contacts && contacts.length > 0 ? (\n        <ContactList />\n      ) : (\n        <p>No contacts added yet</p>\n      )}\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","TitleStyle","Title","_ref","children","_jsx","selectFilter","state","filter","selectContacts","contacts","selectIsLoading","isLoading","selectError","error","selectFiltredContacts","createSelector","filtred","toLowerCase","contact","name","includes","ContactFormContainer","Form","InputContainer","_templateObject2","ContactInput","Field","_templateObject3","ContactErrorMessage","ErrorMessage","_templateObject4","ContactFormBtn","_templateObject5","schema","yup","shape","required","number","initialValues","email","formNameId","nanoid","numberId","emailId","useSelector","dispatch","useDispatch","_jsxs","_Fragment","Formik","onSubmit","_ref2","resetForm","some","alert","concat","addContact","Notiflix","validationSchema","htmlFor","id","type","pattern","placeholder","component","ContactsList","ContactsItem","ContactsBtn","contactList","console","log","length","map","el","onClick","_id","deleteContacts","deleteContact","FilterContainer","FilterInput","filterId","value","onChange","e","currentTarget","filterContact","LoaderContainer","ThreeDots","color","useEffect","fetchContacts","ContactForm","Filter","Loader","ContactList"],"sourceRoot":""}